name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Ou a sua branch de trabalho

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Etapa para configurar Node.js (se necessário)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'

      # Etapa para instalar dependências
      - name: Install dependencies
        run: npm install

      # Etapa para configurar o Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Etapa para instalar o Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Etapa para puxar e construir os containers com Docker Compose
      - name: Pull and Build Docker containers
        run: |
          docker-compose pull  
          docker-compose up --build -d  # Isso já sobe todos os containers, incluindo db e backend

      # Aguardar até o banco de dados MySQL estar pronto para aceitar conexões
      - name: Wait for DB to be ready
        run: |
          docker-compose exec db sh -c 'until mysqladmin ping --silent; do echo "Waiting for MySQL..."; sleep 2; done; echo "MySQL is up!"'

      # Etapa para rodar os testes no backend (dentro do container do backend)
      - name: Run tests in Docker container
        run: docker-compose exec backend-test npm test  # Ou o comando específico para rodar os testes

      - name: Show logs in case of failure
        if: failure()
        run: docker-compose logs
